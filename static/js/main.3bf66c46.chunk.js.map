{"version":3,"sources":["components/Search.js","components/Suggestion.js","components/Lyrics.js","App.js","api/lyrics.js","api/suggest.js","serviceWorker.js","index.js"],"names":["Search","getSuggestions","className","type","placeholder","onChange","e","console","log","target","value","Suggestion","preview","album","title","artist","getLyrics","onClick","name","cover_medium","style","colre","src","alt","Lyrics","lyrics","cover","error","App","useState","suggestions","setSuggestions","selectedSong","setSelectedSong","song","fetch","then","res","json","term","suggest","data","map","s","key","id","Object","keys","length","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"wSAEe,SAASA,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,eAM5B,OACI,yBAAKC,UAAU,yBACX,2BAAOA,UAAU,cAAcC,KAAK,OAAOC,YAAY,4BAA4BC,SAN7F,SAAkBC,GACZC,QAAQC,IAAIF,EAAEG,OAAOC,OACrBT,EAAeK,EAAEG,OAAOC,W,MCJjB,SAASC,EAAT,GAAgE,EAA3CC,QAA4C,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,UAK/D,OACgB,wBAAId,UAAU,OAAOe,QAJrC,WACID,EAAUD,EAAOG,KAAMJ,EAAOD,EAAMM,gBAIpB,yBAAKjB,UAAU,UACX,yBAAKA,UAAU,mBAAmBkB,MAAO,CAAEC,MAAQ,WACnD,yBAAKC,IAAKT,EAAMM,aAAcI,IAAI,QAAQrB,UAAU,UACpD,yBAAKA,UAAU,SAASY,GACxB,yBAAKZ,UAAU,UAAUa,EAAOG,Q,MCX7C,SAASM,EAAT,GAAwD,IAAvCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,MAAOX,EAAuB,EAAvBA,OAAQD,EAAe,EAAfA,MAAOa,EAAQ,EAARA,MAC1D,OACI,yBAAKzB,UAAU,UAEVyB,EACA,6BAAMA,GACN,oCACA,yBAAKL,IAAKI,EAAOH,IAAKT,EAAOZ,UAAU,gBAEvC,wBAAIA,UAAU,gBAAgBa,EAA9B,MAAyCD,GAEzC,yBAAKZ,UAAU,oBACX,6BAAMuB,MC4CRG,MAlDf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,OAE2BF,mBAAS,IAFpC,mBAENG,EAFM,KAEQC,EAFR,KAUb,SAASjB,EAAUD,EAAQD,EAAOY,GAChCO,EAAgB,IAChBF,EAAe,IClBZ,SAAgBhB,EAAQmB,GAC3B,OAAOC,MAAM,GAAD,OAHJ,4BAGI,YAAWpB,EAAX,YAAqBmB,IDkBjCT,CAAOV,EAAOD,GAAOsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACpCF,MAAK,SAAAC,GACAA,EAAIV,MAINM,EAAgB,CAAEN,MAAQ,cAHzBM,EAAgB,CAAElB,SAASD,QAAOY,QAAOD,OAASY,EAAIZ,YAO7D,OACE,yBAAKvB,UAAU,aACb,kBAAC,EAAD,CAAQD,eArBZ,SAAwBsC,IETnB,SAAiBA,GACpB,OAAOJ,MAAM,GAAD,OAJJ,yBAII,oBAAmBI,KFS/BC,CAAQD,GACPH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIN,EAAeM,EAAII,YAmB9B,yBAAKvC,UAAU,eACb,yBAAKA,UAAU,WAET4B,EAAYY,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,eAAYC,IAAKD,EAAEE,IAAQF,EAA3B,CAA8B3B,UAAWA,UAKrE,yBAAKd,UAAU,UACX4C,OAAOC,KAAKf,GAAcgB,OAAS,GAAK,kBAACxB,EAAWQ,IAGxD,4BAAQ9B,UAAU,UACf,yBAAKA,UAAU,cACb,uBAAG+C,KAAK,oCAAR,YACF,6BACE,uBAAGA,KAAK,wCAAR,cGtCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLpB,QAAQoB,MAAMA,EAAMsC,c","file":"static/js/main.3bf66c46.chunk.js","sourcesContent":["import React from 'react'\nimport './Search.css'\nexport default function Search({getSuggestions}) {\n  \n  function onSearch(e) {\n        console.log(e.target.value);\n        getSuggestions(e.target.value)\n    }\n    return (\n        <div className=\"search-song-container\">\n            <input className=\"search-song\" type=\"text\" placeholder=\"Search artist,song lyrics\" onChange={onSearch} />\n        </div>\n    )\n}\n","import React from 'react'\nimport './Suggestion.css'\nexport default function Suggestion({preview, album, title, artist, getLyrics}) {\n    \n    function getInfo() {\n        getLyrics(artist.name, title, album.cover_medium)\n    }\n    return (\n                    <li className=\"flex\" onClick={getInfo}>\n                        <div className=\"result\">\n                            <div className=\"background-image\" style={{ colre : 'green'}}></div>\n                            <img src={album.cover_medium} alt=\"title\" className=\"cover\"/>\n                            <div className=\"title\">{title}</div>\n                            <div className=\"artist\">{artist.name}</div>\n                        </div>\n                    </li>\n\n    )\n}\n","import React from 'react'\nimport './lyrics.css'\nexport default function Lyrics({lyrics, cover, artist, title, error}) {\n    return (\n        <div className=\"lyrics\"> \n         {\n             error ?\n             <div>{error}</div> :\n             <>\n             <img src={cover} alt={title} className=\"cover-large\"/>\n            \n             <h3 className=\"lyrics-title\">{artist} - {title}</h3>\n             \n             <div className=\"lyrics-container\">\n                 <pre>{lyrics}</pre>\n             </div>\n             </>\n         }   \n        </div>\n    )\n}\n","import React , {useState} from 'react';\nimport './App.css';\nimport Search from './components/Search';\nimport Suggestion from './components/Suggestion';\nimport { suggest } from './api/suggest';\nimport { lyrics } from './api/lyrics';\nimport Lyrics from './components/Lyrics';\n\nfunction App() {\n  const [suggestions, setSuggestions] = useState([]);\n  const [selectedSong, setSelectedSong] = useState({});\n  \n  function getSuggestions(term) {\n    suggest(term)\n    .then(res => res.json())\n    .then(res => setSuggestions(res.data));\n  }\n  \n  function getLyrics(artist, title, cover) {\n    setSelectedSong({});\n    setSuggestions([]);\n    lyrics(artist,title).then(res => res.json())\n    .then(res => { \n      if(!res.error) {\n         setSelectedSong({ artist , title, cover, lyrics : res.lyrics}) \n        }\n      else {\n        setSelectedSong({ error : 'Not Found'})\n      }\n     })\n  }\n  return (\n    <div className=\"container\">\n      <Search getSuggestions={getSuggestions}/>\n      <div className=\"suggestions\">\n        <div className=\"results\">\n            { \n              suggestions.map(s => <Suggestion key={s.id} {...s} getLyrics={getLyrics}/>)\n            }\n        </div>\n       </div>\n       \n       <div className=\"lyrics\">\n         { Object.keys(selectedSong).length > 0 && <Lyrics {...selectedSong}/>}\n       </div>\n       \n       <footer className=\"footer\">\n          <div className=\"title-name\">\n            <a href=\"https://lyrical-jcr8zu7yn.now.sh\">Lyrical</a></div>\n          <div>\n            <a href=\"https://github.com/ankitious/Lyrical\">GitHub</a>\n          </div>\n       </footer>\n       \n    </div>\n  );\n}\n\nexport default App;\n","const API = 'https://api.lyrics.ovh/v1'\n\nexport function lyrics(artist, song) {\n    return fetch(`${API}/${artist}/${song}`)\n}","const API = 'https://api.lyrics.ovh';\n\n\nexport function suggest(term) {\n    return fetch(`${API}/suggest/${term}`);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}